version: 2.1
commands:
  upgrade-docker:
    steps:
      - run:
          name: Upgrade Docker Compose
          command: |
            sudo rm /usr/local/bin/docker-compose
            pip3 install docker-compose==${DOCKER_COMPOSE_VERSION}
            sudo ln -s /opt/circleci/.pyenv/shims/docker-compose /usr/local/bin
  install-ansible:
    steps:
      - run:
          name: Install Ansible
          command: pip3 install ansible==${ANSIBLE_VERSION}
jobs:
  test:
    machine:
      image: ubuntu-2004:202107-02
    resource_class: medium
    environment:
      APP_ENV: dev
      DOCKER_COMPOSE_VERSION: 1.27.4
    steps:
      - checkout
      - upgrade-docker
      - run:
          name: Set up Docker variables
          command: |
            cp .docker/.docker-compose.env.dist .docker/.docker-compose.env
            echo 'POSTGRES_DB=bagheera' >> .docker/.docker-compose.env
            echo 'POSTGRES_USER=bagheera' >> .docker/.docker-compose.env
            echo 'POSTGRES_PASSWORD=bagheera' >> .docker/.docker-compose.env
            echo 'APP_SECRET=4d60fc8c3bdfdcb343c262a660db520f' >> .docker/.docker-compose.env
      - run:
          name: Start containers
          command: make docker-start
      - restore_cache:
          keys:
            - v1-node-modules-{{ checksum "yarn.lock" }}
            - v1-node-modules-
      - restore_cache:
          keys:
            - v1-vendor-{{ checksum "composer.lock" }}
            - v1-vendor-
      - run:
          name: Build application
          command: make docker-exec COMMAND="make build"
      - save_cache:
          key: vendor-{{ checksum "composer.lock" }}
          paths:
            - vendor
      - save_cache:
          key: node-modules-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run:
          name: Run tests
          command: make docker-test-ci
      - run:
          name: Upload code coverage
          command: bash <(curl -s https://codecov.io/bash)
  release:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    environment:
      APP_ENV: prod
      DOCKER_COMPOSE_VERSION: 1.27.4
    steps:
      - checkout
      - upgrade-docker
      - run:
          name: Build containers
          command: make docker-build
      - run:
          name: Tag and push images to registry
          command: |
            echo $GITHUB_TOKEN | docker login ghcr.io --username krevindiou --password-stdin
            make docker-push
  deploy:
    machine:
      image: ubuntu-2004:202107-02
    resource_class: medium
    environment:
      ANSIBLE_VERSION: 2.10.7
    steps:
      - add_ssh_keys:
          fingerprints:
            - "MD5:95:64:47:b0:c6:39:b7:0c:aa:31:5e:d1:8f:9c:9e:23"
      - checkout
      - install-ansible
      - run:
          name: Configure deployment
          command: |
            cat \<< EOF > .ansible/host_vars/${DEPLOY_HOSTNAME}.yml
            domain: ${DEPLOY_HOSTNAME}
            cert_email: ${CERT_EMAIL}
            cron_email: ${CRON_EMAIL}
            docker_architecture: arm64
            postgres_password: ${POSTGRES_PASSWORD}
            postgres_secure_password: ${POSTGRES_SECURE_PASSWORD}
            app_secret: ${APP_SECRET}
            jwt_secret_key: ${JWT_SECRET_KEY}
            mailer_url: ${MAILER_URL}
            sender_email: ${SENDER_EMAIL}
            EOF
      - run:
          name: Deploy
          no_output_timeout: 20m
          command: (timeout 20m ansible-playbook .ansible/deploy.yml -i ${DEPLOY_HOSTNAME}, --user=${DEPLOY_USER}; exit 0)
      - run:
          name: Deploy (retry)
          command: ansible-playbook .ansible/deploy.yml -i ${DEPLOY_HOSTNAME}, --user=${DEPLOY_USER}
workflows:
  version: 2
  test-release-and-deploy:
    jobs:
      - test
      - release:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - release
          filters:
            branches:
              only: master
