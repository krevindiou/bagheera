- name: Install requirements
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - gnupg
      - ssmtp
      - mutt
    state: present
    cache_valid_time: 3600
    update_cache: yes

- name: Add PostgreSQL's official GPG key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    id: ACCC4CF8
    state: present

- name: Set up the repository
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt focal-pgdg main"
    state: present

- name: Install postgresql-client
  apt:
    name:
      - "postgresql-client-{{ postgresql_version }}"
    state: present

- name: Create data directory
  file:
    path: "{{ database_directory }}"
    state: directory

- name: Store credentials in a pgpass file
  copy:
    content: "127.0.0.1:5432:{{ postgres_db }}:{{ postgres_user }}:{{ postgres_password }}"
    dest: ~/.pgpass
    mode: 0600

- name: Configure Mutt mail folder
  lineinfile:
    path: /etc/Muttrc
    regexp: '^set folder='
    line: set folder=~"

- name: Tell Mutt not to store sent emails
  lineinfile:
    path: /etc/Muttrc
    regexp: '^set copy='
    line: set copy=no

- name: Set up a backup task
  cron:
    name: backup
    minute: "0"
    hour: "6"
    job: >
      DUMP="/var/backups/{{ postgres_db }}-$(date -u +\%Y-\%m-\%d).dump.gz"
      && pg_dump -h 127.0.0.1 -U {{ postgres_user }} {{ postgres_db }} | gzip > $DUMP
      && find /var/backups/{{ postgres_db }}* -name "{{ postgres_db }}-????-??-01" -prune -o -mtime +30 -exec rm {} \;
      && echo "" | mutt -s "Backup $(basename $DUMP)" -a $DUMP -- {{ cron_email }}
    user: root
    cron_file: backup

- name: Configure sSMTP
  template:
    src: ssmtp.conf.j2
    dest: /etc/ssmtp/ssmtp.conf
  when: cron_email is defined and cron_email != ""

- name: Configure sSMTP
  template:
    src: revaliases.j2
    dest: /etc/ssmtp/revaliases
  when: cron_email is defined and cron_email != ""
