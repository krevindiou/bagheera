<?php

namespace Application\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ApplicationModelsAccountProxy extends \Application\Models\Account implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getAccountId()
    {
        $this->__load();
        return parent::getAccountId();
    }

    public function getBankId()
    {
        $this->__load();
        return parent::getBankId();
    }

    public function setBankId($bankId)
    {
        $this->__load();
        return parent::setBankId($bankId);
    }

    public function getBank()
    {
        $this->__load();
        return parent::getBank();
    }

    public function setBank(\Application\Models\Bank $bank)
    {
        $this->__load();
        return parent::setBank($bank);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getInitialBalance()
    {
        $this->__load();
        return parent::getInitialBalance();
    }

    public function setInitialBalance($initialBalance)
    {
        $this->__load();
        return parent::setInitialBalance($initialBalance);
    }

    public function getOverdraftFacility()
    {
        $this->__load();
        return parent::getOverdraftFacility();
    }

    public function setOverdraftFacility($overdraftFacility)
    {
        $this->__load();
        return parent::setOverdraftFacility($overdraftFacility);
    }

    public function getDetails()
    {
        $this->__load();
        return parent::getDetails();
    }

    public function setDetails($details)
    {
        $this->__load();
        return parent::setDetails($details);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setCreatedAt(\DateTime $createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function setUpdatedAt(\DateTime $updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getSchedulers()
    {
        $this->__load();
        return parent::getSchedulers();
    }

    public function getBalance($reconciledOnly = false)
    {
        $this->__load();
        return parent::getBalance($reconciledOnly);
    }


    public function __sleep()
    {
        return array('__isInitialized__', '_accountId', '_bankId', '_bank', '_name', '_initialBalance', '_overdraftFacility', '_details', '_createdAt', '_updatedAt', '_transactions', '_schedulers');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}