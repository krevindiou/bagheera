<?php

namespace Application\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ApplicationModelsSchedulerProxy extends \Application\Models\Scheduler implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getSchedulerId()
    {
        $this->__load();
        return parent::getSchedulerId();
    }

    public function getAccount()
    {
        $this->__load();
        return parent::getAccount();
    }

    public function setAccount(\Application\Models\Account $account)
    {
        $this->__load();
        return parent::setAccount($account);
    }

    public function getTransferAccount()
    {
        $this->__load();
        return parent::getTransferAccount();
    }

    public function setTransferAccount(\Application\Models\Account $transferAccount = NULL)
    {
        $this->__load();
        return parent::setTransferAccount($transferAccount);
    }

    public function getCategory()
    {
        $this->__load();
        return parent::getCategory();
    }

    public function setCategory(\Application\Models\Category $category = NULL)
    {
        $this->__load();
        return parent::setCategory($category);
    }

    public function getThirdParty()
    {
        $this->__load();
        return parent::getThirdParty();
    }

    public function setThirdParty($thirdParty)
    {
        $this->__load();
        return parent::setThirdParty($thirdParty);
    }

    public function getPaymentMethod()
    {
        $this->__load();
        return parent::getPaymentMethod();
    }

    public function setPaymentMethod(\Application\Models\PaymentMethod $paymentMethod)
    {
        $this->__load();
        return parent::setPaymentMethod($paymentMethod);
    }

    public function getDebit()
    {
        $this->__load();
        return parent::getDebit();
    }

    public function setDebit($debit)
    {
        $this->__load();
        return parent::setDebit($debit);
    }

    public function getCredit()
    {
        $this->__load();
        return parent::getCredit();
    }

    public function setCredit($credit)
    {
        $this->__load();
        return parent::setCredit($credit);
    }

    public function getValueDate()
    {
        $this->__load();
        return parent::getValueDate();
    }

    public function setValueDate(\DateTime $valueDate)
    {
        $this->__load();
        return parent::setValueDate($valueDate);
    }

    public function getLimitDate()
    {
        $this->__load();
        return parent::getLimitDate();
    }

    public function setLimitDate(\DateTime $limitDate = NULL)
    {
        $this->__load();
        return parent::setLimitDate($limitDate);
    }

    public function getIsReconciled()
    {
        $this->__load();
        return parent::getIsReconciled();
    }

    public function setIsReconciled($isReconciled)
    {
        $this->__load();
        return parent::setIsReconciled($isReconciled);
    }

    public function getNotes()
    {
        $this->__load();
        return parent::getNotes();
    }

    public function setNotes($notes)
    {
        $this->__load();
        return parent::setNotes($notes);
    }

    public function getFrequencyUnit()
    {
        $this->__load();
        return parent::getFrequencyUnit();
    }

    public function setFrequencyUnit($frequencyUnit)
    {
        $this->__load();
        return parent::setFrequencyUnit($frequencyUnit);
    }

    public function getFrequencyValue()
    {
        $this->__load();
        return parent::getFrequencyValue();
    }

    public function setFrequencyValue($frequencyValue)
    {
        $this->__load();
        return parent::setFrequencyValue($frequencyValue);
    }

    public function getIsActive()
    {
        $this->__load();
        return parent::getIsActive();
    }

    public function setIsActive($isActive)
    {
        $this->__load();
        return parent::setIsActive($isActive);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setCreatedAt(\DateTime $createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function setUpdatedAt(\DateTime $updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }


    public function __sleep()
    {
        return array('__isInitialized__', '_schedulerId', '_account', '_transferAccount', '_category', '_thirdParty', '_paymentMethod', '_debit', '_credit', '_valueDate', '_limitDate', '_isReconciled', '_notes', '_frequencyUnit', '_frequencyValue', '_isActive', '_createdAt', '_updatedAt');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}